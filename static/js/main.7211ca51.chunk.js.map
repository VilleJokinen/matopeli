{"version":3,"sources":["utils.js","SnakeBoard.js","Points.js","LeaderBoard.js","App.js","index.js"],"names":["range","number","Array","Math","round","keys","SnakeBoard","points","setPoints","useState","parseInt","localStorage","getItem","height","setHeight","width","setWidth","getInitialRows","initialRows","i","j","getObstacles","name","location","map","y","x","ceil","randomObstacle","floor","random","length","randomPosition","position","obstacle","some","setObstacle","rows","setRows","snake","setSnake","direction","setDirection","food","setFood","intervalId","isGameOver","setIsGameOver","startGame","setStartGame","error","setError","useEffect","document","addEventListener","e","keyCode","displayRows","row","className","tile","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","newSnake","push","head","hitSnake","slice","find","b","hitWall","checkGameOver","pointsList","JSON","parse","prompt","setItem","stringify","window","dispatchEvent","Event","forEach","pop","newRows","displaySnake","placeholder","type","onChange","size","target","value","console","log","onClick","Points","getSnakePoints","LeaderBoard","setPointsList","sort","a","App","reload","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7211ca51.chunk.js","sourcesContent":["import {useEffect, useRef} from \"react\";\n/*\nJaetaan tämä pätkä oppilaille pastebiniin https://pastebin.com/\nThanks Dan Abramov for useInterval hook\nhttps://overreacted.io/making-setinterval-declarative-with-react-hooks/\nThis useInterval Hook sets up an interval and clears it after unmounting.\nIt’s a combo of setInterval and clearInterval tied to the component lifecycle.\n*/\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport const range = number => [...Array(Math.round(number)).keys()];\n","import React, {useState, useEffect} from \"react\";\nimport {useInterval, range} from \"./utils\";\nimport \"./SnakeBoard.css\";\n\nconst SnakeBoard = ({points, setPoints}) => {\n  const [height, setHeight] = useState(\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 10\n  );\n  const [width, setWidth] = useState(\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 10\n  );\n  const getInitialRows = () => {\n    var initialRows = [];\n    for (var i = 0; i < height; i++) {\n      initialRows[i] = [];\n      for (var j = 0; j < width; j++) {\n        initialRows[i][j] = \"blank\";\n      }\n    }\n    return initialRows;\n  };\n  const getObstacles = () => [\n    {name: \"tyhjä\", location: []},\n    {\n      name: \"keski\",\n      location: range(width * 0.6).map(y => ({\n        x: Math.round(height / 2),\n        y: y + Math.ceil(width * 0.2)\n      }))\n    },\n    {\n      name: \"reunat\",\n      location: [\n        ...range(width).map(x => ({x, y: 0})),\n        ...range(width).map(x => ({x, y: height - 1})),\n        ...range(height).map(y => ({x: 0, y})),\n        ...range(height).map(y => ({x: height - 1, y}))\n      ]\n    },\n    {\n      name: \"oma\",\n      location: [\n        {x: 2, y: 2},\n        {x: 3, y: 2},\n        {x: 4, y: 2},\n        {x: 5, y: 3},\n        {x: 6, y: 3},\n        {x: 7, y: 3},\n        {x: 8, y: 4},\n        {x: 8, y: 5},\n        {x: 7, y: 6},\n        {x: 6, y: 6},\n        {x: 5, y: 6},\n        {x: 4, y: 7},\n        {x: 3, y: 7},\n        {x: 2, y: 7}\n      ]\n    }\n  ];\n  const randomObstacle = () =>\n    getObstacles()[Math.floor(Math.random() * getObstacles.length)];\n  //     obstacles[Math.floor(Math.random() * obstacles.length)];\n  // Satunnainen sijainti x ja y -koordinaatistossa\n\n  const randomPosition = () => {\n    const position = {\n      x: Math.floor(Math.random() * width),\n      y: Math.floor(Math.random() * height)\n    };\n    if (\n      obstacle.location.some(({x, y}) => position.x === x && position.y === y)\n    ) {\n      return randomPosition();\n    }\n    return position;\n  };\n\n  /*\n  Reactin statea voi käyttää Hookien avulla myös tällaisissa luokattomissa\n  komponenteissa. https://joinex.fi/react-pahkinankuoressa/\n  */\n  // Rows eli rivit merkitsee tässä pelilaudan rivejä\n\n  const [obstacle, setObstacle] = useState(randomObstacle());\n  const [rows, setRows] = useState(getInitialRows);\n  // Lisätään mato. Mato on lista objekteja, joihin tallennetaan madon osien x ja y -sijainnit.\n  // Alustetaan madon pään sijainniksi {x:0, y:0}\n  const [snake, setSnake] = useState([{x: 1, y: 1}]);\n  // Alustetaan madon suunnaksi oikealle\n  const [direction, setDirection] = useState(\"right\");\n  // Käytetään randomPosition funktiota alustamaan ruuan sijainti kun mato syö ruuan\n  const [food, setFood] = useState(randomPosition);\n  // Tallennetaan interval id stateen, jotta sen voi pelin loppuessa pysäyttää\n  const [intervalId, setIntervalId] = useState();\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (width >= 10 && (width <= 100) & (height >= 10) && height <= 100) {\n      setObstacle(randomObstacle());\n      setRows(getInitialRows());\n      setFood(randomPosition());\n    }\n  }, [width, height]);\n\n  const changeDirectionWithKeys = e => {\n    var {keyCode} = e;\n    switch (keyCode) {\n      case 37:\n        setDirection(\"left\");\n        break;\n      case 38:\n        setDirection(\"top\");\n        break;\n      case 39:\n        setDirection(\"right\");\n        break;\n      case 40:\n        setDirection(\"bottom\");\n        break;\n      default:\n        break;\n    }\n  };\n  document.addEventListener(\"keydown\", changeDirectionWithKeys, false);\n\n  // Tässä kohdassa tehdään kaksiulotteisesta taulukosta näkyvä versio pelikentästä\n  const displayRows = rows.map((row, i) => (\n    <div className=\"Snake-row\" key={i}>\n      {row.map((tile, j) => (\n        <div className={`tile ${tile}`} key={j} />\n      ))}\n    </div>\n  ));\n\n  // Asetetaan mato pelilaudalle madon x ja y -sijaintien mukaisesti\n  // Asetetaan samalla myös ruoka pelilaudalle (x,y)\n  const displaySnake = () => {\n    const newRows = getInitialRows();\n    snake.forEach(tile => {\n      newRows[tile.x][tile.y] = \"snake\";\n    });\n    newRows[food.x][food.y] = \"food\";\n    obstacle.location.forEach(tile => {\n      newRows[tile.x][tile.y] = \"obstacle\";\n    });\n\n    setRows(newRows);\n  };\n\n  // Tarkistetaan onko mato osunut itseensä\n  const checkGameOver = () => {\n    const head = snake[0];\n    const body = snake.slice(1, -1);\n    const hitSnake = body.find(b => b.x === head.x && b.y === head.y);\n\n    const hitWall = obstacle.location.some(\n      ({x, y}) => head.x === x && head.y === y\n    );\n    return hitSnake || hitWall;\n  };\n\n  // Liikutetaan matoa haluttuun suuntaan\n  const moveSnake = () => {\n    if (!startGame) return;\n    const newSnake = [];\n    switch (direction) {\n      // Jakojäännös (%) tarkoittaa jakolaskussa yli jäävää kokonaislukua.\n      // Esimerkiksi jos luku 17 jaetaan luvulla 5, jakojäännös on 2, koska 3 · 5 = 15, mutta 2 jää yli.\n      // snake[0] on madon ensimmäinen osa eli pää\n      case \"right\":\n        // x pysyy samana, y menee yhden askeleen oikealle eli plus yksi\n        newSnake.push({x: snake[0].x, y: (snake[0].y + 1) % width});\n        break;\n      case \"left\":\n        // x pysyy samana, y menee yhden askeleen vasemmalle eli miinus yksi\n        newSnake.push({x: snake[0].x, y: (snake[0].y - 1 + width) % width});\n        break;\n      case \"top\":\n        // x menee yhden askeleen ylöspäin eli miinus yksi, y pysyy samana\n        newSnake.push({x: (snake[0].x - 1 + height) % height, y: snake[0].y});\n        break;\n      case \"bottom\":\n        // x menee yhden askeleen alaspäin eli plus yksi, y pysyy samana\n        newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y});\n        break;\n      default:\n        break;\n    }\n\n    if (checkGameOver()) {\n      setIsGameOver(true);\n      // Pysäytä madon liikkumisen intervalli\n      clearInterval(intervalId);\n      // Lisää pisteet local storageen tulostaulukkoa varten\n      // HUOM! Local storage hyväksyy vain JSON:ia\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\n      const name = prompt(\"Peli päättyi! Anna pelimerkkisi!\");\n      pointsList.push({name, points});\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\n      window.dispatchEvent(new Event(\"storage\"));\n    }\n\n    // Lisätään madolle joka intervallilla / \"askeleella\" uusi pala\n    snake.forEach(tile => {\n      newSnake.push(tile);\n    });\n\n    // Vaihdetaan ruuan sijaintia jos mato syö ruuan.\n    if (snake[0].x === food.x && snake[0].y === food.y) {\n      setFood(randomPosition);\n      setPoints(points + 1);\n    } else {\n      // Jos mato ei syö ruokaa, poistetaan viimeinen hännän pala,\n      // jottei mato kasva joka askeleella, vaan vain silloin kun se saa ruuan kiinni!\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n    displaySnake();\n  };\n\n  // Käytetään kustomoitua intervalli-funktiota madon liikuttamiseen\n  useInterval(moveSnake, 250, setIntervalId);\n\n  return (\n    <div className=\"Snake-board\">\n      {!startGame && (\n        <>\n          <div>Pelilaudan koko on nyt {width} ruutua.</div>\n          <div>Aseta halutessasi uusi pelilaudan koko:</div>\n          <input\n            className=\"Board-size\"\n            placeholder=\"Koko 10-100 (suositus 10-35)\"\n            type=\"number\"\n            onChange={e => {\n              const size = parseInt(e.target.value);\n              if (size <= 100 && size >= 10) {\n                console.log(\"OK\", size);\n                setWidth(size);\n                setHeight(size);\n                localStorage.setItem(\"snake-board-size\", size);\n                setError(null);\n              } else {\n                console.error(\"ei hyvä\", size);\n                setError(\n                  `Pelilaudan koko on liian ${size > 100 ? \"suuri\" : \"pieni\"}`\n                );\n              }\n            }}\n          />\n          {error && <div className=\"Error\">{error}</div>}\n          <button className=\"Start-game\" onClick={setStartGame}>\n            Aloita peli!\n          </button>\n        </>\n      )}\n      {(startGame, displayRows)}\n      {isGameOver && <div className=\"Game-over\">Game over!</div>}\n    </div>\n  );\n};\n\nexport default SnakeBoard;\n","import React from 'react'\nimport './Points.css'\n\nconst Points = ({points}) => {\n  return (\n    <div className='Points'>{points} pistettä</div>\n  )\n}\n\nexport default Points\n","import React, {useState} from \"react\";\nimport \"./LeaderBoard.css\";\n\nconst getSnakePoints = () =>\n  JSON.parse(localStorage.getItem(\"snake-points\")) || [];\n\nconst LeaderBoard = () => {\n  const [pointsList, setPointsList] = useState(getSnakePoints());\n\n  window.addEventListener(\"storage\", () => {\n    setPointsList(getSnakePoints());\n  });\n\n  const sortedPointsList = pointsList.sort((a, b) => b - a);\n\n  return (\n    <div className=\"LeaderBoard\">\n      <div className=\"LeaderBoard-header\">Top 5</div>\n      <div className=\"LeaderBoard-points\">\n        {pointsList\n          .sort((a, b) => b.points - a.points)\n          .slice(0, 5)\n          .map((points, i) => (\n            <div key={`${points.points}-${i}`}>\n              {points.name} {points.points}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default LeaderBoard;\n","import React, {useState} from 'react'\nimport './App.css'\nimport SnakeBoard from './SnakeBoard'\nimport Points from './Points'\nimport LeaderBoard from './LeaderBoard'\n\nfunction App() {\n  const [points, setPoints] = useState(0)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Matopeli\n      </header>\n      <div className='Game'>\n        <Points points={points} />\n        <SnakeBoard points={points} setPoints={setPoints} />\n      </div>\n      <button onClick={() => window.location.reload(false)}>Uusi peli</button>\n      <LeaderBoard />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
[{"/home/villeboi/kodarit/matopeli/src/index.js":"1","/home/villeboi/kodarit/matopeli/src/App.js":"2","/home/villeboi/kodarit/matopeli/src/SnakeBoard.js":"3","/home/villeboi/kodarit/matopeli/src/utils.js":"4","/home/villeboi/mato_uus_yritys/matopeli-oma/src/index.js":"5","/home/villeboi/mato_uus_yritys/matopeli-oma/src/App.js":"6","/home/villeboi/mato_uus_yritys/matopeli-oma/src/Points.js":"7","/home/villeboi/mato_uus_yritys/matopeli-oma/src/LeaderBoard.js":"8","/home/villeboi/mato_uus_yritys/matopeli-oma/src/SnakeBoard.js":"9","/home/villeboi/mato_uus_yritys/matopeli-oma/src/utils.js":"10"},{"size":220,"mtime":1614782393999,"results":"11","hashOfConfig":"12"},{"size":229,"mtime":1614782393998,"results":"13","hashOfConfig":"12"},{"size":1994,"mtime":1615911285823,"results":"14","hashOfConfig":"12"},{"size":811,"mtime":1614782394000,"results":"15","hashOfConfig":"12"},{"size":220,"mtime":1618325082260,"results":"16","hashOfConfig":"17"},{"size":610,"mtime":1618324418990,"results":"18","hashOfConfig":"17"},{"size":173,"mtime":1618324418991,"results":"19","hashOfConfig":"17"},{"size":852,"mtime":1619534501246,"results":"20","hashOfConfig":"17"},{"size":8449,"mtime":1621350079728,"results":"21","hashOfConfig":"17"},{"size":882,"mtime":1619534972991,"results":"22","hashOfConfig":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"e288dd",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1054gj7",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/villeboi/kodarit/matopeli/src/index.js",[],["47","48"],"/home/villeboi/kodarit/matopeli/src/App.js",[],"/home/villeboi/kodarit/matopeli/src/SnakeBoard.js",[],"/home/villeboi/kodarit/matopeli/src/utils.js",[],"/home/villeboi/mato_uus_yritys/matopeli-oma/src/index.js",[],["49","50"],"/home/villeboi/mato_uus_yritys/matopeli-oma/src/App.js",[],"/home/villeboi/mato_uus_yritys/matopeli-oma/src/Points.js",[],"/home/villeboi/mato_uus_yritys/matopeli-oma/src/LeaderBoard.js",["51"],"import React, {useState} from \"react\";\nimport \"./LeaderBoard.css\";\n\nconst getSnakePoints = () =>\n  JSON.parse(localStorage.getItem(\"snake-points\")) || [];\n\nconst LeaderBoard = () => {\n  const [pointsList, setPointsList] = useState(getSnakePoints());\n\n  window.addEventListener(\"storage\", () => {\n    setPointsList(getSnakePoints());\n  });\n\n  const sortedPointsList = pointsList.sort((a, b) => b - a);\n\n  return (\n    <div className=\"LeaderBoard\">\n      <div className=\"LeaderBoard-header\">Top 5</div>\n      <div className=\"LeaderBoard-points\">\n        {pointsList\n          .sort((a, b) => b.points - a.points)\n          .slice(0, 5)\n          .map((points, i) => (\n            <div key={`${points.points}-${i}`}>\n              {points.name} {points.points}\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default LeaderBoard;\n","/home/villeboi/mato_uus_yritys/matopeli-oma/src/SnakeBoard.js",["52"],"import React, {useState, useEffect} from \"react\";\nimport {useInterval, range} from \"./utils\";\nimport \"./SnakeBoard.css\";\n\nconst SnakeBoard = ({points, setPoints}) => {\n  const [height, setHeight] = useState(\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 10\n  );\n  const [width, setWidth] = useState(\n    parseInt(localStorage.getItem(\"snake-board-size\")) || 10\n  );\n  const getInitialRows = () => {\n    var initialRows = [];\n    for (var i = 0; i < height; i++) {\n      initialRows[i] = [];\n      for (var j = 0; j < width; j++) {\n        initialRows[i][j] = \"blank\";\n      }\n    }\n    return initialRows;\n  };\n  const getObstacles = () => [\n    {name: \"tyhjä\", location: []},\n    {\n      name: \"keski\",\n      location: range(width * 0.6).map(y => ({\n        x: Math.round(height / 2),\n        y: y + Math.ceil(width * 0.2)\n      }))\n    },\n    {\n      name: \"reunat\",\n      location: [\n        ...range(width).map(x => ({x, y: 0})),\n        ...range(width).map(x => ({x, y: height - 1})),\n        ...range(height).map(y => ({x: 0, y})),\n        ...range(height).map(y => ({x: height - 1, y}))\n      ]\n    },\n    {\n      name: \"oma\",\n      location: [\n        {x: 2, y: 2},\n        {x: 3, y: 2},\n        {x: 4, y: 2},\n        {x: 5, y: 3},\n        {x: 6, y: 3},\n        {x: 7, y: 3},\n        {x: 8, y: 4},\n        {x: 8, y: 5},\n        {x: 7, y: 6},\n        {x: 6, y: 6},\n        {x: 5, y: 6},\n        {x: 4, y: 7},\n        {x: 3, y: 7},\n        {x: 2, y: 7}\n      ]\n    }\n  ];\n  const randomObstacle = () =>\n    getObstacles()[Math.floor(Math.random() * getObstacles.length)];\n  //     obstacles[Math.floor(Math.random() * obstacles.length)];\n  // Satunnainen sijainti x ja y -koordinaatistossa\n\n  const randomPosition = () => {\n    const position = {\n      x: Math.floor(Math.random() * width),\n      y: Math.floor(Math.random() * height)\n    };\n    if (\n      obstacle.location.some(({x, y}) => position.x === x && position.y === y)\n    ) {\n      return randomPosition();\n    }\n    return position;\n  };\n\n  /*\n  Reactin statea voi käyttää Hookien avulla myös tällaisissa luokattomissa\n  komponenteissa. https://joinex.fi/react-pahkinankuoressa/\n  */\n  // Rows eli rivit merkitsee tässä pelilaudan rivejä\n\n  const [obstacle, setObstacle] = useState(randomObstacle());\n  const [rows, setRows] = useState(getInitialRows);\n  // Lisätään mato. Mato on lista objekteja, joihin tallennetaan madon osien x ja y -sijainnit.\n  // Alustetaan madon pään sijainniksi {x:0, y:0}\n  const [snake, setSnake] = useState([{x: 1, y: 1}]);\n  // Alustetaan madon suunnaksi oikealle\n  const [direction, setDirection] = useState(\"right\");\n  // Käytetään randomPosition funktiota alustamaan ruuan sijainti kun mato syö ruuan\n  const [food, setFood] = useState(randomPosition);\n  // Tallennetaan interval id stateen, jotta sen voi pelin loppuessa pysäyttää\n  const [intervalId, setIntervalId] = useState();\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [startGame, setStartGame] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (width >= 10 && (width <= 100) & (height >= 10) && height <= 100) {\n      setObstacle(randomObstacle());\n      setRows(getInitialRows());\n      setFood(randomPosition());\n    }\n  }, [width, height]);\n\n  const changeDirectionWithKeys = e => {\n    var {keyCode} = e;\n    switch (keyCode) {\n      case 37:\n        setDirection(\"left\");\n        break;\n      case 38:\n        setDirection(\"top\");\n        break;\n      case 39:\n        setDirection(\"right\");\n        break;\n      case 40:\n        setDirection(\"bottom\");\n        break;\n      default:\n        break;\n    }\n  };\n  document.addEventListener(\"keydown\", changeDirectionWithKeys, false);\n\n  // Tässä kohdassa tehdään kaksiulotteisesta taulukosta näkyvä versio pelikentästä\n  const displayRows = rows.map((row, i) => (\n    <div className=\"Snake-row\" key={i}>\n      {row.map((tile, j) => (\n        <div className={`tile ${tile}`} key={j} />\n      ))}\n    </div>\n  ));\n\n  // Asetetaan mato pelilaudalle madon x ja y -sijaintien mukaisesti\n  // Asetetaan samalla myös ruoka pelilaudalle (x,y)\n  const displaySnake = () => {\n    const newRows = getInitialRows();\n    snake.forEach(tile => {\n      newRows[tile.x][tile.y] = \"snake\";\n    });\n    newRows[food.x][food.y] = \"food\";\n    obstacle.location.forEach(tile => {\n      newRows[tile.x][tile.y] = \"obstacle\";\n    });\n\n    setRows(newRows);\n  };\n\n  // Tarkistetaan onko mato osunut itseensä\n  const checkGameOver = () => {\n    const head = snake[0];\n    const body = snake.slice(1, -1);\n    const hitSnake = body.find(b => b.x === head.x && b.y === head.y);\n\n    const hitWall = obstacle.location.some(\n      ({x, y}) => head.x === x && head.y === y\n    );\n    return hitSnake || hitWall;\n  };\n\n  // Liikutetaan matoa haluttuun suuntaan\n  const moveSnake = () => {\n    if (!startGame) return;\n    const newSnake = [];\n    switch (direction) {\n      // Jakojäännös (%) tarkoittaa jakolaskussa yli jäävää kokonaislukua.\n      // Esimerkiksi jos luku 17 jaetaan luvulla 5, jakojäännös on 2, koska 3 · 5 = 15, mutta 2 jää yli.\n      // snake[0] on madon ensimmäinen osa eli pää\n      case \"right\":\n        // x pysyy samana, y menee yhden askeleen oikealle eli plus yksi\n        newSnake.push({x: snake[0].x, y: (snake[0].y + 1) % width});\n        break;\n      case \"left\":\n        // x pysyy samana, y menee yhden askeleen vasemmalle eli miinus yksi\n        newSnake.push({x: snake[0].x, y: (snake[0].y - 1 + width) % width});\n        break;\n      case \"top\":\n        // x menee yhden askeleen ylöspäin eli miinus yksi, y pysyy samana\n        newSnake.push({x: (snake[0].x - 1 + height) % height, y: snake[0].y});\n        break;\n      case \"bottom\":\n        // x menee yhden askeleen alaspäin eli plus yksi, y pysyy samana\n        newSnake.push({x: (snake[0].x + 1) % height, y: snake[0].y});\n        break;\n      default:\n        break;\n    }\n\n    if (checkGameOver()) {\n      setIsGameOver(true);\n      // Pysäytä madon liikkumisen intervalli\n      clearInterval(intervalId);\n      // Lisää pisteet local storageen tulostaulukkoa varten\n      // HUOM! Local storage hyväksyy vain JSON:ia\n      const pointsList = JSON.parse(localStorage.getItem(\"snake-points\")) || [];\n      const name = prompt(\"Peli päättyi! Anna pelimerkkisi!\");\n      pointsList.push({name, points});\n      localStorage.setItem(\"snake-points\", JSON.stringify(pointsList));\n      window.dispatchEvent(new Event(\"storage\"));\n    }\n\n    // Lisätään madolle joka intervallilla / \"askeleella\" uusi pala\n    snake.forEach(tile => {\n      newSnake.push(tile);\n    });\n\n    // Vaihdetaan ruuan sijaintia jos mato syö ruuan.\n    if (snake[0].x === food.x && snake[0].y === food.y) {\n      setFood(randomPosition);\n      setPoints(points + 1);\n    } else {\n      // Jos mato ei syö ruokaa, poistetaan viimeinen hännän pala,\n      // jottei mato kasva joka askeleella, vaan vain silloin kun se saa ruuan kiinni!\n      newSnake.pop();\n    }\n\n    setSnake(newSnake);\n    displaySnake();\n  };\n\n  // Käytetään kustomoitua intervalli-funktiota madon liikuttamiseen\n  useInterval(moveSnake, 250, setIntervalId);\n\n  return (\n    <div className=\"Snake-board\">\n      {!startGame && (\n        <>\n          <div>Pelilaudan koko on nyt {width} ruutua.</div>\n          <div>Aseta halutessasi uusi pelilaudan koko:</div>\n          <input\n            className=\"Board-size\"\n            placeholder=\"Koko 10-100 (suositus 10-35)\"\n            type=\"number\"\n            onChange={e => {\n              const size = parseInt(e.target.value);\n              if (size <= 100 && size >= 10) {\n                console.log(\"OK\", size);\n                setWidth(size);\n                setHeight(size);\n                localStorage.setItem(\"snake-board-size\", size);\n                setError(null);\n              } else {\n                console.error(\"ei hyvä\", size);\n                setError(\n                  `Pelilaudan koko on liian ${size > 100 ? \"suuri\" : \"pieni\"}`\n                );\n              }\n            }}\n          />\n          {error && <div className=\"Error\">{error}</div>}\n          <button className=\"Start-game\" onClick={setStartGame}>\n            Aloita peli!\n          </button>\n        </>\n      )}\n      {(startGame, displayRows)}\n      {isGameOver && <div className=\"Game-over\">Game over!</div>}\n    </div>\n  );\n};\n\nexport default SnakeBoard;\n","/home/villeboi/mato_uus_yritys/matopeli-oma/src/utils.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"53","replacedBy":"57"},{"ruleId":"55","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":14,"column":9,"nodeType":"61","messageId":"62","endLine":14,"endColumn":25},{"ruleId":"63","severity":1,"message":"64","line":105,"column":6,"nodeType":"65","endLine":105,"endColumn":21,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],["67"],["68"],"no-unused-vars","'sortedPointsList' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getInitialRows', 'randomObstacle', and 'randomPosition'. Either include them or remove the dependency array.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [width, height, randomObstacle, getInitialRows, randomPosition]",{"range":"72","text":"73"},[3258,3273],"[width, height, randomObstacle, getInitialRows, randomPosition]"]